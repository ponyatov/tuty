%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM STR				/* symbol 'string' */
%token <o> EQ AT COLON			/* = @ : */
%token <o> ADD SUB MUL DIV POW	/* + - * / ^ */
%token <o> L R LQ RQ LB RB		/* ( ) [ ] { } */
%type <o> scalar ex list
%%
REPL : | REPL ex { W($2); W("\n------"); W($2->eval()); W("\n=======\n"); } ;
scalar : SYM | STR ;
ex : scalar
	| ex COLON ex	{ $$=$2; $$->push($1); $$->push($3); }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex		{ $$=$2; $$->push($1); $$->push($3); }
	| LQ list RQ	{ $$=$2; }
;
list :				{ $$=new List(); }
	| list ex		{ $$=$1; $$->push($2); }
;
%%
